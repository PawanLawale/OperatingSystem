 package com.okstate.cs;

/**
 * @author : Pawan Lawale
 * @Course # : CS-5323
 * @Assignment : A Multiprogramming batch system with process management.
 * @Date : 28-Apr-2014
 * 
 * @Routine : OperatingSystem
 *	1. Description:
 *			OperatingSystem is a routine which starts up the virtual OS. First it creates the 
 *			virtual hardware i.e Memory, DISK & CPU. After creation it initializes these hardwares with
 *			default values. This is done by calling initialize method. Apart from hardware initialization,
 *		 	it also  initializes ErrorHandler Module, which is responsible to handle all the errors generated by OS.
 *			The functionality of individual method is explained in the comments above methods.
 *
 *	2. Global Variables:
 *		a. systemClock : 
 *				This is a system clock.
 *		b. segmentFault:
 *				flag to indicate there is a segment fault.
 *		c. pageFault:
 *				flag to indicate there is a page fault.
 *		d. readyQueue:
 *				Contains all the jobIds which are eligible to execute.
 *		e. blockedQueue:
 *				Contains all the jobIds which are interrupted during execution.
 * 			
 */

import java.util.ArrayList;
import java.util.TreeMap;

public class OperatingSystem {

	public static ArrayList<String> readyQueue;
	public static ArrayList<String> blockedQueue;
	
	public static TreeMap<String,PCB> pcbs;
	
	public static int pageFaultClock = 0;
	
	public static int systemClock = 0;
	public static int idleTime = 0;
	
	public static boolean segmentFault = false;
	public static int segmentNo = 0;
	
	public static boolean pageFault = false;
	public static int pageNo = 0;
	
	/*
	 * Constructor of OS.
	 */
	public OperatingSystem(){
		if(readyQueue == null){
			readyQueue = new ArrayList<String>();
		}
		if(blockedQueue == null){
			blockedQueue = new ArrayList<String>();
		}
		if(pcbs == null){
			pcbs = new TreeMap<String, PCB>();
		}
	}
	
	/*
	 * This is a main method, the execution of OS begins here.
	 * It initializes all virtual hardware first and then starts OS.
	 */
	public static void main(String args[]){
		OperatingSystem os = new OperatingSystem();
		try{
			os.initializeVirtualHardware();
			os.startOS();
		}catch(ErrorHandler e){
			e.throwExceptionMessage(e.getErrorCode());
			OutputSpooler.recordEvent(ErrorHandler.terminationErrorMessage);
		}
	}
	
	/*
	 * This method first spools the batch file.
	 * After spooling, it loads the initial page of first job in the ready queue.
	 * Then it begins with the execution process.
	 */
	public void startOS() throws ErrorHandler{
		InputSpooler inputSpooler = new InputSpooler();
		Loader loader = new Loader();
		ProcessManager pm = new ProcessManager();
		
		String fileName = inputSpooler.readFileName();
		boolean eof = false;
		while(!eof || readyQueue.size()>0){
			boolean continueLoading = true;
			eof = inputSpooler.startSpooling(fileName);
			while(continueLoading){
				continueLoading = loader.startLoading(readyQueue.get(0));
			}
			pm.startProcessing(loader);
		}
		
		OutputSpooler.writeSystemInfo();
		
	}
	
	/*
	 * initializes Memory, DISK and CPU
	 */
	public void initializeVirtualHardware(){
		Disk.initializeMemory();
		Memory.initializeMemory();
		CPU.initializeCPU();
	}
	
}
