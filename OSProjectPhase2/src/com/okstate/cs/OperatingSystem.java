package com.okstate.cs;

/**
 * @author : Pawan Lawale
 * @Course # : CS-5323
 * @Assignment : A Simple Batch System with Memory Management
 * @Date : 31-Mar-2014
 * 
 * @Routine : OperatingSystem
 *	1. Description:
 *			OperatingSystem is a routine which starts up the virtual OS. First it creates the 
 *			virtual hardware i.e Memory, DISK & CPU. After creation it initializes these hardwares with
 *			default values. This is done by calling initialize method. Apart from hardware initialization,
 *		 	it also  initializes ErrorHandler Module, which is responsible to handle all the errors generated by OS.
 *			The functionality of individual method is explained in the comments above methods.
 *
 *	2. Global Variables:
 *		a. systemClock : 
 *				This is a system clock.
 *		b. totalIoTime:
 *				Variable to keep track of I/O time.
 *		c. totalSegmentFaultTime:
 *				Variable to keep track of segment fault time
 *		d. totalPageFaultTime:
 *				Variable to keep track of page fault time.
 *		e. errorHandlingTime:
 *				Variable to keep track of error handling time.
 *		f. segmentFault:
 *				flag to indicate there is a segment fault.
 *		g. pageFault:
 *				flag to indicate there is a page fault.
 * 			
 */

import java.util.ArrayList;
import java.util.TreeMap;

public class OperatingSystem {

	public static ArrayList<String> jobIds;
	public static TreeMap<String,PCB> pcbs;
	public static int pageFaultClock = 0;
	
	public static int systemClock = 0;
	public static int totalIoTime = 0;
	public static int totalSegmentFaultTime = 0;
	public static int totalPageFaultTime = 0;
	public static int errorHandlingTime = 0;
	
	public static boolean segmentFault = false;
	public static int segmentNo = 0;
	
	public static boolean pageFault = false;
	public static int pageNo = 0;
	
	/*
	 * Constructor of OS.
	 */
	public OperatingSystem(){
		if(jobIds == null){
			jobIds = new ArrayList<String>();
		}
		if(pcbs == null){
			pcbs = new TreeMap<String, PCB>();
		}
	}
	
	/*
	 * This is a main method, the execution of OS begins here.
	 * It initializes all virtual hardware first and then starts OS.
	 */
	public static void main(String args[]){
		OperatingSystem os = new OperatingSystem();
		try{
			os.initializeVirtualHardware();
			os.startOS();
		}catch(ErrorHandler e){
			e.throwErrorMessage(e.getErrorCode());
		}
		OutputSpooler.generateOutputFile();
	}
	
	/*
	 * Once the hardware is initialized, this method runs continously to 
	 * execute job. If there is any segment/page fault, this method 
	 * submits the request to handle it to the fault handler and once it 
	 * is done it again resumes the execution. It terminates when there is
	 * any fatal error or when the job is finished.
	 */
	public void startOS() throws ErrorHandler{
		InputSpooler inputSpooler = new InputSpooler();
		Loader loader = new Loader();
		
		inputSpooler.startSpooling();
		loader.startLoading(jobIds.get(0));
		
		while(true){
			//Start Execution
			boolean flag = false;
			flag = CPUManager.executeJob(jobIds.get(0));
			
			//Segment Fault
			if(segmentFault){
				if(FaultHandler.segmentFaultHandler(jobIds.get(0), segmentNo)){
					flag = true;
				}else{
					flag = false;
				}
			}
			
			//PageFault
			if(pageFault){
				if(FaultHandler.pageFaultHandler(jobIds.get(0), segmentNo, pageNo)){
					flag = true;
				}else{
					flag = false;
				}
			}
			
			//else terminate
			if(!flag){
				break;
			}
		}
	}
	
	/*
	 * initializes Memory, DISK and CPU
	 */
	public void initializeVirtualHardware(){
		Disk.initializeMemory();
		Memory.initializeMemory();
		CPU.initializeCPU();
	}
}
